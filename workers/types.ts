// Shared types across Durable Objects

/**
 * Type of walnut origin - game-generated or player-hidden
 */
export type WalnutOrigin = "game" | "player";

/**
 * Hiding method for walnuts - affects point values
 */
export type HidingMethod = "buried" | "bush";

/**
 * Interface representing a walnut in the game
 * Used for storing, hiding, and finding walnuts across the forest
 */
export interface Walnut {
  /** Unique ID for this walnut. Player walnuts prefixed with 'p-', game walnuts with 'g-' */
  id: string;
  
  /** ID of the squirrel that owns/hid this walnut */
  ownerId: string;
  
  /** Whether this walnut was generated by the game or hidden by a player */
  origin: WalnutOrigin;
  
  /** How this walnut is hidden - affects point values */
  hiddenIn: HidingMethod;
  
  /** 3D coordinates of the walnut in the forest */
  location: { 
    x: number; 
    y: number; 
    z: number 
  };
  
  /** Whether this walnut has been found by a player */
  found: boolean;
  
  /** ID of the squirrel that found this walnut (if found) */
  foundBy?: string;
  
  /** Unix timestamp (milliseconds) when this walnut was hidden */
  timestamp: number;
}

/**
 * Interface representing a player (squirrel) in the game
 * Tracks player state, score, and participation
 */
export interface Squirrel {
  /** Unique identifier for this squirrel */
  id: string;
  
  /** Unix timestamp (milliseconds) when player first joined */
  joinedAt: number;
  
  /** Unix timestamp (milliseconds) of last activity */
  lastSeen: number;
  
  /** Total seconds player has participated in the current forest cycle */
  participationSeconds: number;
  
  /** Score multiplier based on participation time (1.0 to 2.0) */
  multiplier: number;
  
  /** Available power-ups and their status (true=available, false=used) */
  powerUps: Record<string, boolean>;
  
  /** Array of walnut IDs hidden by this player */
  hiddenWalnuts: string[];
  
  /** Array of walnut IDs found by this player */
  foundWalnuts: string[];
  
  /** Player's current score (before applying multiplier) */
  score: number;
  
  /** Whether player has achieved the first finder bonus (first to find 10 walnuts) */
  firstFinderAchieved: boolean;
}
